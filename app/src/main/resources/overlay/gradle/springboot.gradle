apply plugin: "org.springframework.boot"

configurations {
    bootRunConfig.extendsFrom compileClasspath
}

dependencies {
    bootRunConfig "org.apereo.cas:cas-server-core:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-logging:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-web:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-webflow:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-cookie:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-logout:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-authentication:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-validation:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-audit:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-tickets:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-services:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-core-util:${project.ext.casServerVersion}"

    bootRunConfig "org.apereo.cas:cas-server-support-thymeleaf:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-support-validation:${project.ext.casServerVersion}"

    bootRunConfig "org.apereo.cas:cas-server-webapp-resources:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-config:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-init:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-tomcat:${project.ext.casServerVersion}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-init-tomcat:${project.ext.casServerVersion}"

    bootRunConfig "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
}

sourceSets {
    bootRunSources {
        resources {
            srcDirs new File("//etc/cas/templates/"),
                    new File("${project.getProjectDir()}/src/main/resources/")
        }
    }
}

bootBuildImage {
    imageName = "apereo/cas:${casServerVersion}"
}

bootRun {
    classpath = configurations.bootRunConfig + sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
    doFirst {
        sourceResources sourceSets.bootRunSources
        systemProperties = System.properties
    }

    def list = []
    list.add("-XX:TieredStopAtLevel=1")
    list.add("-Xverify:none")
    list.add("--add-modules")
    list.add("java.se")
    list.add("--add-exports")
    list.add("java.base/jdk.internal.ref=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")

    list.add("-XX:+UnlockExperimentalVMOptions")
    list.add("-XX:+EnableJVMCI")
    list.add("-XX:+UseJVMCICompiler")

    list.add("-Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n")

    jvmArgs = list

    def appArgList = []
    args = appArgList
}

springBoot {
    buildInfo()
    mainClassName = "org.apereo.cas.web.CasWebApplication"
}

bootWar {
    def executable = project.hasProperty("executable") && Boolean.valueOf(project.getProperty("executable"))
    if (executable) {
        logger.info "Including launch script for executable WAR artifact"
        launchScript()
    } else {
        logger.info "WAR artifact is not marked as an executable"
    }
    archiveName "app.war"
    baseName "app"
    excludeDevtools = false

    entryCompression = ZipEntryCompression.STORED
    /*
        attachClasses = true 
        classesClassifier = 'classes'
        archiveClasses = true
    */
    overlays {
        /*
            https://docs.freefair.io/gradle-plugins/current/reference/#_io_freefair_war_overlay
            Note: The "excludes" property is only for files in the war dependency.
            If a jar is excluded from the war, it could be brought back into the final war as a dependency
            of non-war dependencies. Those should be excluded via normal gradle dependency exclusions.
        */
        cas {
            from "org.apereo.cas:cas-server-webapp${project.appServer}:${casServerVersion}@war"
            provided = false
            /*
            excludes = ["WEB-INF/lib/somejar-1.0*"]
            enableCompilation = true
            includes = ["*.xyz"]
            targetPath = "sub-path/bar"
            skip = false
            */
        }
    }
}
